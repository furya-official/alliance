// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kaiju/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Kaijus
type QueryKaijusRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijusRequest) Reset()         { *m = QueryKaijusRequest{} }
func (m *QueryKaijusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijusRequest) ProtoMessage()    {}
func (*QueryKaijusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{2}
}
func (m *QueryKaijusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijusRequest.Merge(m, src)
}
func (m *QueryKaijusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijusRequest proto.InternalMessageInfo

func (m *QueryKaijusRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryKaijusResponse struct {
	Kaijus  []KaijuAsset     `protobuf:"bytes,1,rep,name=kaijus,proto3" json:"kaijus"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijusResponse) Reset()         { *m = QueryKaijusResponse{} }
func (m *QueryKaijusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijusResponse) ProtoMessage()    {}
func (*QueryKaijusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{3}
}
func (m *QueryKaijusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijusResponse.Merge(m, src)
}
func (m *QueryKaijusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijusResponse proto.InternalMessageInfo

func (m *QueryKaijusResponse) GetKaijus() []KaijuAsset {
	if m != nil {
		return m.Kaijus
	}
	return nil
}

func (m *QueryKaijusResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Kaiju
type QueryKaijuRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryKaijuRequest) Reset()         { *m = QueryKaijuRequest{} }
func (m *QueryKaijuRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuRequest) ProtoMessage()    {}
func (*QueryKaijuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{4}
}
func (m *QueryKaijuRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuRequest.Merge(m, src)
}
func (m *QueryKaijuRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuRequest proto.InternalMessageInfo

func (m *QueryKaijuRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryKaijuResponse struct {
	Kaiju *KaijuAsset `protobuf:"bytes,1,opt,name=kaiju,proto3" json:"kaiju,omitempty"`
}

func (m *QueryKaijuResponse) Reset()         { *m = QueryKaijuResponse{} }
func (m *QueryKaijuResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuResponse) ProtoMessage()    {}
func (*QueryKaijuResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{5}
}
func (m *QueryKaijuResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuResponse.Merge(m, src)
}
func (m *QueryKaijuResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuResponse proto.InternalMessageInfo

func (m *QueryKaijuResponse) GetKaiju() *KaijuAsset {
	if m != nil {
		return m.Kaiju
	}
	return nil
}

type QueryIBCKaijuRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryIBCKaijuRequest) Reset()         { *m = QueryIBCKaijuRequest{} }
func (m *QueryIBCKaijuRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCKaijuRequest) ProtoMessage()    {}
func (*QueryIBCKaijuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{6}
}
func (m *QueryIBCKaijuRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCKaijuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCKaijuRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCKaijuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCKaijuRequest.Merge(m, src)
}
func (m *QueryIBCKaijuRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCKaijuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCKaijuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCKaijuRequest proto.InternalMessageInfo

func (m *QueryIBCKaijuRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryKaijuValidatorRequest struct {
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryKaijuValidatorRequest) Reset()         { *m = QueryKaijuValidatorRequest{} }
func (m *QueryKaijuValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuValidatorRequest) ProtoMessage()    {}
func (*QueryKaijuValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{7}
}
func (m *QueryKaijuValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuValidatorRequest.Merge(m, src)
}
func (m *QueryKaijuValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuValidatorRequest proto.InternalMessageInfo

type QueryAllKaijuValidatorsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKaijuValidatorsRequest) Reset()         { *m = QueryAllKaijuValidatorsRequest{} }
func (m *QueryAllKaijuValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKaijuValidatorsRequest) ProtoMessage()    {}
func (*QueryAllKaijuValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{8}
}
func (m *QueryAllKaijuValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKaijuValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKaijuValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKaijuValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKaijuValidatorsRequest.Merge(m, src)
}
func (m *QueryAllKaijuValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKaijuValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKaijuValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKaijuValidatorsRequest proto.InternalMessageInfo

type QueryAllKaijusDelegationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKaijusDelegationsRequest) Reset()         { *m = QueryAllKaijusDelegationsRequest{} }
func (m *QueryAllKaijusDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKaijusDelegationsRequest) ProtoMessage()    {}
func (*QueryAllKaijusDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{9}
}
func (m *QueryAllKaijusDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKaijusDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKaijusDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKaijusDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKaijusDelegationsRequest.Merge(m, src)
}
func (m *QueryAllKaijusDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKaijusDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKaijusDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKaijusDelegationsRequest proto.InternalMessageInfo

// KaijusDelegation
type QueryKaijusDelegationsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijusDelegationsRequest) Reset()         { *m = QueryKaijusDelegationsRequest{} }
func (m *QueryKaijusDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijusDelegationsRequest) ProtoMessage()    {}
func (*QueryKaijusDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{10}
}
func (m *QueryKaijusDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijusDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijusDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijusDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijusDelegationsRequest.Merge(m, src)
}
func (m *QueryKaijusDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijusDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijusDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijusDelegationsRequest proto.InternalMessageInfo

// KaijusDelegationByValidator
type QueryKaijusDelegationByValidatorRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijusDelegationByValidatorRequest) Reset() {
	*m = QueryKaijusDelegationByValidatorRequest{}
}
func (m *QueryKaijusDelegationByValidatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryKaijusDelegationByValidatorRequest) ProtoMessage() {}
func (*QueryKaijusDelegationByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{11}
}
func (m *QueryKaijusDelegationByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijusDelegationByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijusDelegationByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijusDelegationByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijusDelegationByValidatorRequest.Merge(m, src)
}
func (m *QueryKaijusDelegationByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijusDelegationByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijusDelegationByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijusDelegationByValidatorRequest proto.InternalMessageInfo

// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
type DelegationResponse struct {
	Delegation Delegation `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    types.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{12}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

type QueryKaijusDelegationsResponse struct {
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	Pagination  *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijusDelegationsResponse) Reset()         { *m = QueryKaijusDelegationsResponse{} }
func (m *QueryKaijusDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijusDelegationsResponse) ProtoMessage()    {}
func (*QueryKaijusDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{13}
}
func (m *QueryKaijusDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijusDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijusDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijusDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijusDelegationsResponse.Merge(m, src)
}
func (m *QueryKaijusDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijusDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijusDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijusDelegationsResponse proto.InternalMessageInfo

func (m *QueryKaijusDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryKaijusDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// KaijuDelegation
type QueryKaijuDelegationRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Denom         string             `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijuDelegationRequest) Reset()         { *m = QueryKaijuDelegationRequest{} }
func (m *QueryKaijuDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuDelegationRequest) ProtoMessage()    {}
func (*QueryKaijuDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{14}
}
func (m *QueryKaijuDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuDelegationRequest.Merge(m, src)
}
func (m *QueryKaijuDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuDelegationRequest proto.InternalMessageInfo

type QueryIBCKaijuDelegationRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Hash          string             `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIBCKaijuDelegationRequest) Reset()         { *m = QueryIBCKaijuDelegationRequest{} }
func (m *QueryIBCKaijuDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCKaijuDelegationRequest) ProtoMessage()    {}
func (*QueryIBCKaijuDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{15}
}
func (m *QueryIBCKaijuDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCKaijuDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCKaijuDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCKaijuDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCKaijuDelegationRequest.Merge(m, src)
}
func (m *QueryIBCKaijuDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCKaijuDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCKaijuDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCKaijuDelegationRequest proto.InternalMessageInfo

type QueryKaijuDelegationResponse struct {
	Delegation DelegationResponse `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
}

func (m *QueryKaijuDelegationResponse) Reset()         { *m = QueryKaijuDelegationResponse{} }
func (m *QueryKaijuDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuDelegationResponse) ProtoMessage()    {}
func (*QueryKaijuDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{16}
}
func (m *QueryKaijuDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuDelegationResponse.Merge(m, src)
}
func (m *QueryKaijuDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuDelegationResponse proto.InternalMessageInfo

func (m *QueryKaijuDelegationResponse) GetDelegation() DelegationResponse {
	if m != nil {
		return m.Delegation
	}
	return DelegationResponse{}
}

// KaijuDelegation
type QueryKaijuDelegationRewardsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Denom         string             `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijuDelegationRewardsRequest) Reset()         { *m = QueryKaijuDelegationRewardsRequest{} }
func (m *QueryKaijuDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryKaijuDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{17}
}
func (m *QueryKaijuDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryKaijuDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuDelegationRewardsRequest proto.InternalMessageInfo

type QueryIBCKaijuDelegationRewardsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Hash          string             `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIBCKaijuDelegationRewardsRequest) Reset() {
	*m = QueryIBCKaijuDelegationRewardsRequest{}
}
func (m *QueryIBCKaijuDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCKaijuDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryIBCKaijuDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{18}
}
func (m *QueryIBCKaijuDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCKaijuDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCKaijuDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCKaijuDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCKaijuDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryIBCKaijuDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCKaijuDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCKaijuDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCKaijuDelegationRewardsRequest proto.InternalMessageInfo

type QueryKaijuDelegationRewardsResponse struct {
	Rewards []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=rewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewards"`
}

func (m *QueryKaijuDelegationRewardsResponse) Reset() {
	*m = QueryKaijuDelegationRewardsResponse{}
}
func (m *QueryKaijuDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryKaijuDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{19}
}
func (m *QueryKaijuDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryKaijuDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuDelegationRewardsResponse proto.InternalMessageInfo

type QueryKaijuValidatorResponse struct {
	ValidatorAddr         string          `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	TotalDelegationShares []types.DecCoin `protobuf:"bytes,2,rep,name=total_delegation_shares,json=totalDelegationShares,proto3" json:"total_delegation_shares"`
	ValidatorShares       []types.DecCoin `protobuf:"bytes,3,rep,name=validator_shares,json=validatorShares,proto3" json:"validator_shares"`
	TotalStaked           []types.DecCoin `protobuf:"bytes,4,rep,name=total_staked,json=totalStaked,proto3" json:"total_staked"`
}

func (m *QueryKaijuValidatorResponse) Reset()         { *m = QueryKaijuValidatorResponse{} }
func (m *QueryKaijuValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuValidatorResponse) ProtoMessage()    {}
func (*QueryKaijuValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{20}
}
func (m *QueryKaijuValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuValidatorResponse.Merge(m, src)
}
func (m *QueryKaijuValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuValidatorResponse proto.InternalMessageInfo

type QueryKaijuValidatorsResponse struct {
	Validators []QueryKaijuValidatorResponse `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
	Pagination *query.PageResponse              `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKaijuValidatorsResponse) Reset()         { *m = QueryKaijuValidatorsResponse{} }
func (m *QueryKaijuValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKaijuValidatorsResponse) ProtoMessage()    {}
func (*QueryKaijuValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e633a06a64e02e, []int{21}
}
func (m *QueryKaijuValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKaijuValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKaijuValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKaijuValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKaijuValidatorsResponse.Merge(m, src)
}
func (m *QueryKaijuValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKaijuValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKaijuValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKaijuValidatorsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "kaiju.kaiju.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kaiju.kaiju.QueryParamsResponse")
	proto.RegisterType((*QueryKaijusRequest)(nil), "kaiju.kaiju.QueryKaijusRequest")
	proto.RegisterType((*QueryKaijusResponse)(nil), "kaiju.kaiju.QueryKaijusResponse")
	proto.RegisterType((*QueryKaijuRequest)(nil), "kaiju.kaiju.QueryKaijuRequest")
	proto.RegisterType((*QueryKaijuResponse)(nil), "kaiju.kaiju.QueryKaijuResponse")
	proto.RegisterType((*QueryIBCKaijuRequest)(nil), "kaiju.kaiju.QueryIBCKaijuRequest")
	proto.RegisterType((*QueryKaijuValidatorRequest)(nil), "kaiju.kaiju.QueryKaijuValidatorRequest")
	proto.RegisterType((*QueryAllKaijuValidatorsRequest)(nil), "kaiju.kaiju.QueryAllKaijuValidatorsRequest")
	proto.RegisterType((*QueryAllKaijusDelegationsRequest)(nil), "kaiju.kaiju.QueryAllKaijusDelegationsRequest")
	proto.RegisterType((*QueryKaijusDelegationsRequest)(nil), "kaiju.kaiju.QueryKaijusDelegationsRequest")
	proto.RegisterType((*QueryKaijusDelegationByValidatorRequest)(nil), "kaiju.kaiju.QueryKaijusDelegationByValidatorRequest")
	proto.RegisterType((*DelegationResponse)(nil), "kaiju.kaiju.DelegationResponse")
	proto.RegisterType((*QueryKaijusDelegationsResponse)(nil), "kaiju.kaiju.QueryKaijusDelegationsResponse")
	proto.RegisterType((*QueryKaijuDelegationRequest)(nil), "kaiju.kaiju.QueryKaijuDelegationRequest")
	proto.RegisterType((*QueryIBCKaijuDelegationRequest)(nil), "kaiju.kaiju.QueryIBCKaijuDelegationRequest")
	proto.RegisterType((*QueryKaijuDelegationResponse)(nil), "kaiju.kaiju.QueryKaijuDelegationResponse")
	proto.RegisterType((*QueryKaijuDelegationRewardsRequest)(nil), "kaiju.kaiju.QueryKaijuDelegationRewardsRequest")
	proto.RegisterType((*QueryIBCKaijuDelegationRewardsRequest)(nil), "kaiju.kaiju.QueryIBCKaijuDelegationRewardsRequest")
	proto.RegisterType((*QueryKaijuDelegationRewardsResponse)(nil), "kaiju.kaiju.QueryKaijuDelegationRewardsResponse")
	proto.RegisterType((*QueryKaijuValidatorResponse)(nil), "kaiju.kaiju.QueryKaijuValidatorResponse")
	proto.RegisterType((*QueryKaijuValidatorsResponse)(nil), "kaiju.kaiju.QueryKaijuValidatorsResponse")
}

func init() { proto.RegisterFile("kaiju/query.proto", fileDescriptor_c4e633a06a64e02e) }

var fileDescriptor_c4e633a06a64e02e = []byte{
	// 1282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x38, 0x69, 0x9a, 0xbc, 0x40, 0x69, 0x5f, 0x13, 0x92, 0x98, 0xc4, 0x0e, 0x5b, 0xf2,
	0x41, 0xd4, 0x78, 0x9b, 0x34, 0x7c, 0xb4, 0x7c, 0x88, 0x7c, 0x34, 0xa5, 0xad, 0x52, 0xa5, 0xae,
	0x00, 0xa9, 0x97, 0x68, 0xec, 0x5d, 0x39, 0x56, 0x6d, 0xaf, 0xbb, 0xbb, 0x69, 0x1b, 0xa2, 0x08,
	0x89, 0x53, 0x8f, 0x48, 0x5c, 0xf8, 0xb8, 0xf4, 0x04, 0x27, 0xb8, 0x72, 0xe0, 0xc8, 0xa5, 0x12,
	0x20, 0x55, 0x02, 0x01, 0x42, 0x34, 0x42, 0x09, 0x48, 0xfc, 0x19, 0xc8, 0xb3, 0x33, 0xbb, 0xe3,
	0xdd, 0xf5, 0xc7, 0x26, 0x36, 0x12, 0xa7, 0x6e, 0xc7, 0xf3, 0xde, 0xfb, 0xfd, 0xde, 0xfb, 0xcd,
	0x9b, 0x37, 0x81, 0x01, 0x5a, 0x2c, 0x16, 0x68, 0x39, 0xa7, 0xab, 0x77, 0xb6, 0x74, 0x73, 0x3b,
	0x5d, 0x31, 0x0d, 0xdb, 0xc0, 0x53, 0x62, 0x35, 0x2d, 0x3e, 0x12, 0x03, 0x79, 0x23, 0x6f, 0xb0,
	0x5f, 0xd5, 0xea, 0x97, 0xb3, 0x31, 0x31, 0x9a, 0x37, 0x8c, 0x7c, 0x51, 0x57, 0x69, 0xa5, 0xa0,
	0xd2, 0x72, 0xd9, 0xb0, 0xa9, 0x5d, 0x30, 0xca, 0x16, 0xff, 0x75, 0x26, 0x67, 0x58, 0x25, 0xc3,
	0x52, 0xb3, 0xd4, 0xe2, 0xfe, 0xd5, 0xbb, 0x73, 0x59, 0xdd, 0xa6, 0x73, 0x6a, 0x85, 0xe6, 0x0b,
	0x65, 0xb6, 0x99, 0xef, 0x1d, 0x74, 0x81, 0x54, 0xa8, 0x49, 0x4b, 0xc2, 0xc5, 0x90, 0xbb, 0xec,
	0x42, 0x72, 0x7e, 0x48, 0xca, 0xbe, 0x85, 0xd7, 0x9c, 0x51, 0x10, 0xfe, 0x12, 0xae, 0xa1, 0xa6,
	0x17, 0xf5, 0xbc, 0x8c, 0x4b, 0x19, 0x00, 0xbc, 0x51, 0x45, 0xb3, 0xce, 0x22, 0x65, 0xf4, 0x3b,
	0x5b, 0xba, 0x65, 0x2b, 0xd7, 0xe1, 0x74, 0xcd, 0xaa, 0x55, 0x31, 0xca, 0x96, 0x8e, 0xaf, 0x40,
	0x8f, 0x83, 0x68, 0x98, 0x8c, 0x93, 0xe9, 0xfe, 0xf9, 0x91, 0x74, 0x20, 0x39, 0x69, 0xc7, 0x64,
	0xa9, 0xfb, 0xd1, 0x5e, 0x2a, 0x96, 0xe1, 0xdb, 0x95, 0x0d, 0x18, 0x64, 0xfe, 0x16, 0xf9, 0x2e,
	0x11, 0x08, 0x57, 0x01, 0x3c, 0xfa, 0xdc, 0xeb, 0x64, 0xda, 0xe1, 0x93, 0xae, 0xf2, 0x49, 0x3b,
	0xb5, 0xe0, 0xac, 0xd2, 0xeb, 0x34, 0xaf, 0x73, 0xdb, 0x8c, 0x64, 0xa9, 0x7c, 0x49, 0xe0, 0x59,
	0x7f, 0x04, 0x0e, 0x7a, 0x05, 0xfa, 0x04, 0xb8, 0x2a, 0xee, 0xae, 0xe9, 0xfe, 0xf9, 0xf1, 0x10,
	0xdc, 0xc2, 0x70, 0xd1, 0xb2, 0x74, 0x9b, 0xc3, 0xf7, 0x0c, 0xf1, 0x72, 0x0d, 0xd0, 0x38, 0x03,
	0x3a, 0xd5, 0x14, 0xa8, 0x03, 0xa1, 0x06, 0xe9, 0x59, 0x18, 0xa8, 0x01, 0x2a, 0x32, 0x31, 0x00,
	0xc7, 0x34, 0xbd, 0x6c, 0x94, 0x58, 0x12, 0xfa, 0x32, 0xce, 0x7f, 0x94, 0x77, 0x7c, 0x89, 0x73,
	0x59, 0xbd, 0x0e, 0xbd, 0x02, 0x1c, 0x4f, 0x5b, 0x53, 0x52, 0x19, 0xd7, 0x42, 0x99, 0x85, 0x21,
	0xe6, 0xf6, 0xca, 0xd2, 0xb2, 0x1f, 0x07, 0x42, 0xf7, 0x26, 0xb5, 0x36, 0x39, 0x0c, 0xf6, 0xad,
	0xac, 0xc3, 0x58, 0x0d, 0x8a, 0x77, 0x69, 0xb1, 0xa0, 0x51, 0xdb, 0x30, 0x85, 0xd1, 0x04, 0x9c,
	0xb8, 0x2b, 0xd6, 0x36, 0xa8, 0xa6, 0x99, 0xdc, 0xfc, 0x69, 0x77, 0x75, 0x51, 0xd3, 0xcc, 0x8b,
	0xbd, 0x0f, 0x1e, 0xa6, 0x62, 0xff, 0x3c, 0x4c, 0xc5, 0x94, 0x2d, 0x78, 0x5e, 0x78, 0x0c, 0x38,
	0x6d, 0xb7, 0x38, 0xa4, 0xb0, 0xf7, 0xe0, 0x8c, 0x3f, 0xac, 0xb5, 0xe2, 0x9d, 0x89, 0xce, 0x05,
	0xfe, 0x9c, 0xc0, 0x78, 0xad, 0x3e, 0x43, 0xc2, 0x4e, 0xc0, 0x09, 0x7e, 0x40, 0x7d, 0x59, 0x74,
	0x57, 0xab, 0x59, 0xf4, 0xa1, 0x8b, 0xb7, 0x01, 0xdd, 0x0f, 0x04, 0x66, 0xea, 0xa1, 0x5b, 0xda,
	0x0e, 0xab, 0x76, 0x2b, 0x38, 0x83, 0xa2, 0x88, 0x87, 0x88, 0xc2, 0x47, 0xa7, 0xab, 0x0d, 0x74,
	0x3e, 0x23, 0x80, 0x1e, 0x01, 0xf7, 0xc8, 0x2c, 0x03, 0x78, 0xfd, 0x8f, 0x57, 0x75, 0x2c, 0xe4,
	0xd0, 0x48, 0xdc, 0x9d, 0x36, 0x20, 0x99, 0xe1, 0x05, 0x38, 0x9e, 0xa5, 0x45, 0x76, 0xec, 0xe2,
	0xbc, 0x07, 0xca, 0x50, 0x05, 0xc8, 0x65, 0xa3, 0x20, 0xac, 0xc5, 0xfe, 0x8b, 0xdd, 0x0c, 0xdc,
	0xb7, 0xc4, 0x93, 0x7e, 0x88, 0x12, 0x38, 0xd6, 0x35, 0xe8, 0x97, 0x7a, 0x35, 0x6f, 0x5b, 0x13,
	0x0d, 0xc1, 0x0a, 0x5b, 0x1e, 0x56, 0xb6, 0x6f, 0x5f, 0xf7, 0xfa, 0x85, 0x40, 0xb2, 0x06, 0xbd,
	0x1c, 0xbf, 0x13, 0xea, 0x70, 0xdb, 0x62, 0x97, 0xd4, 0x16, 0x7d, 0x9a, 0xe9, 0x6e, 0x83, 0x66,
	0x7e, 0x15, 0x65, 0x91, 0x5a, 0x62, 0xa7, 0xb9, 0x89, 0x56, 0xdb, 0xe5, 0xb5, 0xda, 0x0e, 0x30,
	0x2b, 0x43, 0xaa, 0x6e, 0xc5, 0xb8, 0xda, 0xae, 0x85, 0x9c, 0x8c, 0x48, 0x62, 0x93, 0xcc, 0x95,
	0x27, 0x04, 0x26, 0xea, 0x06, 0xbc, 0x47, 0x4d, 0xcd, 0xfa, 0x7f, 0x2b, 0x65, 0x8f, 0xc0, 0x74,
	0x23, 0xa5, 0x74, 0x90, 0xe2, 0x7f, 0x23, 0x98, 0x4f, 0x08, 0x4c, 0x36, 0x2b, 0x20, 0x17, 0x8e,
	0x06, 0xc7, 0x4d, 0x67, 0x89, 0xb7, 0xa8, 0x06, 0xdd, 0x50, 0xad, 0x2a, 0xe5, 0xf7, 0xbd, 0xd4,
	0x54, 0xbe, 0x60, 0x6f, 0x6e, 0x65, 0xd3, 0x39, 0xa3, 0xa4, 0xf2, 0xc1, 0xd5, 0xf9, 0x67, 0xd6,
	0xd2, 0x6e, 0xab, 0xf6, 0x76, 0x45, 0xb7, 0x98, 0x41, 0x46, 0xb8, 0x96, 0xa0, 0x7d, 0x17, 0xf7,
	0xb5, 0x1f, 0xe9, 0x6e, 0xe2, 0x90, 0x5a, 0x1b, 0x45, 0xf0, 0x16, 0x0c, 0xd9, 0x86, 0x4d, 0x8b,
	0x1b, 0x9e, 0x72, 0x37, 0xac, 0x4d, 0x6a, 0xea, 0xd6, 0x70, 0x9c, 0x31, 0x19, 0x0d, 0x65, 0xb2,
	0xa2, 0xe7, 0xa4, 0xd6, 0x3e, 0xc8, 0x5c, 0x78, 0xe9, 0xb9, 0xc9, 0x1c, 0xe0, 0x1a, 0x9c, 0xf4,
	0x20, 0x70, 0xa7, 0x5d, 0x2d, 0x3b, 0x7d, 0xc6, 0xb5, 0xe5, 0xee, 0x2e, 0xc1, 0x53, 0x0e, 0x54,
	0xcb, 0xa6, 0xb7, 0x75, 0x6d, 0xb8, 0xbb, 0x65, 0x57, 0xfd, 0xcc, 0xee, 0x26, 0x33, 0x93, 0xb2,
	0xf8, 0x23, 0xf1, 0xb5, 0x04, 0x79, 0xf4, 0xe2, 0x69, 0x7c, 0x0f, 0xc0, 0xc5, 0x21, 0x8a, 0x3b,
	0x17, 0xd2, 0x12, 0x1a, 0x57, 0x43, 0xb4, 0x07, 0xcf, 0x55, 0xdb, 0xae, 0x22, 0x8f, 0xcf, 0xfc,
	0xa7, 0x08, 0xc7, 0x18, 0x0e, 0xbc, 0x0f, 0x3d, 0xce, 0xfb, 0x03, 0x27, 0xea, 0x61, 0xad, 0x79,
	0xe8, 0x24, 0x26, 0x9b, 0x6d, 0x73, 0x02, 0x2b, 0xa9, 0x0f, 0x7f, 0xfa, 0xeb, 0xe3, 0xf8, 0x08,
	0x0e, 0xa9, 0xb6, 0x6e, 0x9a, 0xd4, 0x7d, 0x81, 0x59, 0xfc, 0x89, 0x86, 0xef, 0x43, 0x9f, 0x7b,
	0xa1, 0xe3, 0x74, 0xb3, 0x44, 0xb9, 0xf1, 0x5f, 0x6c, 0x61, 0x27, 0x87, 0x30, 0xcc, 0x20, 0x20,
	0x9e, 0xf4, 0x43, 0xc0, 0x07, 0x04, 0xfa, 0xa5, 0x66, 0x84, 0x33, 0xf5, 0x9c, 0x06, 0xc7, 0xfd,
	0x44, 0x53, 0xa8, 0x6e, 0xfc, 0x33, 0x2c, 0xfe, 0x18, 0x3e, 0x17, 0x48, 0x41, 0x21, 0x9b, 0x53,
	0x77, 0xaa, 0xcd, 0x68, 0x17, 0xbf, 0x22, 0x30, 0x54, 0x67, 0xb8, 0xc6, 0x97, 0x1b, 0x84, 0x6a,
	0x30, 0x16, 0x27, 0x16, 0x9a, 0xe6, 0x28, 0x64, 0x82, 0x52, 0x5e, 0x60, 0x70, 0x93, 0x38, 0x1a,
	0x80, 0x2b, 0x0f, 0x46, 0x5f, 0x13, 0x38, 0x15, 0x50, 0x2f, 0x9e, 0x8b, 0x20, 0x74, 0x07, 0x63,
	0xf4, 0xa3, 0xa1, 0x2c, 0x30, 0x80, 0x69, 0x3c, 0x1b, 0x00, 0xe8, 0x9d, 0x16, 0x75, 0xa7, 0xb6,
	0x97, 0xed, 0xe2, 0x17, 0x04, 0x06, 0x43, 0x1f, 0x4d, 0xb8, 0xd0, 0x42, 0x7a, 0x03, 0x6f, 0xac,
	0xc4, 0x7c, 0xcb, 0xc0, 0xad, 0x16, 0x94, 0x20, 0x9d, 0xf3, 0x6f, 0x08, 0x9c, 0x0e, 0x29, 0x10,
	0x9e, 0x8f, 0x56, 0xcd, 0xa3, 0x48, 0xe0, 0x25, 0x86, 0x53, 0xc5, 0xd9, 0x46, 0x12, 0x50, 0x77,
	0x6a, 0x2f, 0xe8, 0x5d, 0x7c, 0x42, 0x20, 0xd9, 0xf8, 0x21, 0x84, 0x6f, 0x44, 0xc0, 0x13, 0x7c,
	0x40, 0x1d, 0x92, 0xce, 0x2a, 0xa3, 0xf3, 0x16, 0xbe, 0x19, 0x89, 0x4e, 0x50, 0x42, 0xdf, 0x13,
	0xc0, 0xe0, 0xd5, 0x8e, 0x4d, 0x25, 0x1c, 0x18, 0x87, 0x9b, 0x8b, 0x27, 0x38, 0x30, 0x2a, 0xd7,
	0x19, 0x8b, 0xb7, 0x71, 0xf5, 0x68, 0x2c, 0xaa, 0x3b, 0xca, 0x46, 0x69, 0x17, 0x7f, 0x26, 0x30,
	0x18, 0x3a, 0x89, 0xd5, 0x3f, 0x10, 0x8d, 0x46, 0xfc, 0x43, 0x71, 0xba, 0xc1, 0x38, 0x5d, 0xc3,
	0x2b, 0x47, 0xe4, 0x24, 0x35, 0xd2, 0x3f, 0x08, 0x8c, 0xd4, 0x9d, 0xbf, 0xf0, 0xd5, 0x28, 0x20,
	0xe5, 0x81, 0x34, 0x71, 0xe1, 0x10, 0x96, 0x9c, 0xe5, 0x55, 0xc6, 0x72, 0x05, 0x97, 0x02, 0x2c,
	0xf9, 0xa0, 0x16, 0xa1, 0x6a, 0x7f, 0x13, 0x18, 0x6d, 0x34, 0x3f, 0xe3, 0x6b, 0x11, 0x8b, 0xd7,
	0x2e, 0x92, 0x6b, 0x8c, 0xe4, 0x65, 0xbc, 0x74, 0x04, 0x92, 0x52, 0x19, 0x3f, 0x80, 0x5e, 0xf7,
	0x5a, 0x9e, 0x6a, 0x7e, 0xd5, 0x46, 0xbd, 0x93, 0xc7, 0x19, 0xda, 0x04, 0x0e, 0x07, 0xd0, 0xf2,
	0x44, 0x2f, 0x5d, 0x7d, 0xb4, 0x9f, 0x24, 0x8f, 0xf7, 0x93, 0xe4, 0xcf, 0xfd, 0x24, 0xf9, 0xe8,
	0x20, 0x19, 0x7b, 0x7c, 0x90, 0x8c, 0xfd, 0x76, 0x90, 0x8c, 0xdd, 0x3a, 0x27, 0xcd, 0xe1, 0xcc,
	0x7a, 0xb6, 0x64, 0x94, 0xf5, 0x6d, 0xd7, 0x87, 0x7a, 0xdf, 0xfb, 0x64, 0x53, 0x79, 0xb6, 0x87,
	0xfd, 0xc9, 0xf8, 0xfc, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0xb4, 0x46, 0xac, 0x29, 0x17,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Query paginated kaijus
	Kaijus(ctx context.Context, in *QueryKaijusRequest, opts ...grpc.CallOption) (*QueryKaijusResponse, error)
	// Query a specific kaiju by ibc hash
	IBCKaiju(ctx context.Context, in *QueryIBCKaijuRequest, opts ...grpc.CallOption) (*QueryKaijuResponse, error)
	// Query all paginated kaiju delegations
	AllKaijusDelegations(ctx context.Context, in *QueryAllKaijusDelegationsRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error)
	// Query kaiju validator
	KaijuValidator(ctx context.Context, in *QueryKaijuValidatorRequest, opts ...grpc.CallOption) (*QueryKaijuValidatorResponse, error)
	// Query all paginated kaiju validators
	AllKaijuValidators(ctx context.Context, in *QueryAllKaijuValidatorsRequest, opts ...grpc.CallOption) (*QueryKaijuValidatorsResponse, error)
	// Query all paginated kaiju delegations for a delegator addr
	KaijusDelegation(ctx context.Context, in *QueryKaijusDelegationsRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error)
	// Query all paginated kaiju delegations for a delegator addr and validator_addr
	KaijusDelegationByValidator(ctx context.Context, in *QueryKaijusDelegationByValidatorRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error)
	// Query a delegation to an kaiju by delegator addr, validator_addr and denom
	KaijuDelegation(ctx context.Context, in *QueryKaijuDelegationRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationResponse, error)
	// Query a delegation to an kaiju by delegator addr, validator_addr and denom
	IBCKaijuDelegation(ctx context.Context, in *QueryIBCKaijuDelegationRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	KaijuDelegationRewards(ctx context.Context, in *QueryKaijuDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationRewardsResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	IBCKaijuDelegationRewards(ctx context.Context, in *QueryIBCKaijuDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationRewardsResponse, error)
	// Query a specific kaiju by denom
	Kaiju(ctx context.Context, in *QueryKaijuRequest, opts ...grpc.CallOption) (*QueryKaijuResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Kaijus(ctx context.Context, in *QueryKaijusRequest, opts ...grpc.CallOption) (*QueryKaijusResponse, error) {
	out := new(QueryKaijusResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/Kaijus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCKaiju(ctx context.Context, in *QueryIBCKaijuRequest, opts ...grpc.CallOption) (*QueryKaijuResponse, error) {
	out := new(QueryKaijuResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/IBCKaiju", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllKaijusDelegations(ctx context.Context, in *QueryAllKaijusDelegationsRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error) {
	out := new(QueryKaijusDelegationsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/AllKaijusDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KaijuValidator(ctx context.Context, in *QueryKaijuValidatorRequest, opts ...grpc.CallOption) (*QueryKaijuValidatorResponse, error) {
	out := new(QueryKaijuValidatorResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/KaijuValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllKaijuValidators(ctx context.Context, in *QueryAllKaijuValidatorsRequest, opts ...grpc.CallOption) (*QueryKaijuValidatorsResponse, error) {
	out := new(QueryKaijuValidatorsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/AllKaijuValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KaijusDelegation(ctx context.Context, in *QueryKaijusDelegationsRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error) {
	out := new(QueryKaijusDelegationsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/KaijusDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KaijusDelegationByValidator(ctx context.Context, in *QueryKaijusDelegationByValidatorRequest, opts ...grpc.CallOption) (*QueryKaijusDelegationsResponse, error) {
	out := new(QueryKaijusDelegationsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/KaijusDelegationByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KaijuDelegation(ctx context.Context, in *QueryKaijuDelegationRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationResponse, error) {
	out := new(QueryKaijuDelegationResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/KaijuDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCKaijuDelegation(ctx context.Context, in *QueryIBCKaijuDelegationRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationResponse, error) {
	out := new(QueryKaijuDelegationResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/IBCKaijuDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KaijuDelegationRewards(ctx context.Context, in *QueryKaijuDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationRewardsResponse, error) {
	out := new(QueryKaijuDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/KaijuDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCKaijuDelegationRewards(ctx context.Context, in *QueryIBCKaijuDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryKaijuDelegationRewardsResponse, error) {
	out := new(QueryKaijuDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/IBCKaijuDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Kaiju(ctx context.Context, in *QueryKaijuRequest, opts ...grpc.CallOption) (*QueryKaijuResponse, error) {
	out := new(QueryKaijuResponse)
	err := c.cc.Invoke(ctx, "/kaiju.kaiju.Query/Kaiju", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Query paginated kaijus
	Kaijus(context.Context, *QueryKaijusRequest) (*QueryKaijusResponse, error)
	// Query a specific kaiju by ibc hash
	IBCKaiju(context.Context, *QueryIBCKaijuRequest) (*QueryKaijuResponse, error)
	// Query all paginated kaiju delegations
	AllKaijusDelegations(context.Context, *QueryAllKaijusDelegationsRequest) (*QueryKaijusDelegationsResponse, error)
	// Query kaiju validator
	KaijuValidator(context.Context, *QueryKaijuValidatorRequest) (*QueryKaijuValidatorResponse, error)
	// Query all paginated kaiju validators
	AllKaijuValidators(context.Context, *QueryAllKaijuValidatorsRequest) (*QueryKaijuValidatorsResponse, error)
	// Query all paginated kaiju delegations for a delegator addr
	KaijusDelegation(context.Context, *QueryKaijusDelegationsRequest) (*QueryKaijusDelegationsResponse, error)
	// Query all paginated kaiju delegations for a delegator addr and validator_addr
	KaijusDelegationByValidator(context.Context, *QueryKaijusDelegationByValidatorRequest) (*QueryKaijusDelegationsResponse, error)
	// Query a delegation to an kaiju by delegator addr, validator_addr and denom
	KaijuDelegation(context.Context, *QueryKaijuDelegationRequest) (*QueryKaijuDelegationResponse, error)
	// Query a delegation to an kaiju by delegator addr, validator_addr and denom
	IBCKaijuDelegation(context.Context, *QueryIBCKaijuDelegationRequest) (*QueryKaijuDelegationResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	KaijuDelegationRewards(context.Context, *QueryKaijuDelegationRewardsRequest) (*QueryKaijuDelegationRewardsResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	IBCKaijuDelegationRewards(context.Context, *QueryIBCKaijuDelegationRewardsRequest) (*QueryKaijuDelegationRewardsResponse, error)
	// Query a specific kaiju by denom
	Kaiju(context.Context, *QueryKaijuRequest) (*QueryKaijuResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Kaijus(ctx context.Context, req *QueryKaijusRequest) (*QueryKaijusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kaijus not implemented")
}
func (*UnimplementedQueryServer) IBCKaiju(ctx context.Context, req *QueryIBCKaijuRequest) (*QueryKaijuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCKaiju not implemented")
}
func (*UnimplementedQueryServer) AllKaijusDelegations(ctx context.Context, req *QueryAllKaijusDelegationsRequest) (*QueryKaijusDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllKaijusDelegations not implemented")
}
func (*UnimplementedQueryServer) KaijuValidator(ctx context.Context, req *QueryKaijuValidatorRequest) (*QueryKaijuValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KaijuValidator not implemented")
}
func (*UnimplementedQueryServer) AllKaijuValidators(ctx context.Context, req *QueryAllKaijuValidatorsRequest) (*QueryKaijuValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllKaijuValidators not implemented")
}
func (*UnimplementedQueryServer) KaijusDelegation(ctx context.Context, req *QueryKaijusDelegationsRequest) (*QueryKaijusDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KaijusDelegation not implemented")
}
func (*UnimplementedQueryServer) KaijusDelegationByValidator(ctx context.Context, req *QueryKaijusDelegationByValidatorRequest) (*QueryKaijusDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KaijusDelegationByValidator not implemented")
}
func (*UnimplementedQueryServer) KaijuDelegation(ctx context.Context, req *QueryKaijuDelegationRequest) (*QueryKaijuDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KaijuDelegation not implemented")
}
func (*UnimplementedQueryServer) IBCKaijuDelegation(ctx context.Context, req *QueryIBCKaijuDelegationRequest) (*QueryKaijuDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCKaijuDelegation not implemented")
}
func (*UnimplementedQueryServer) KaijuDelegationRewards(ctx context.Context, req *QueryKaijuDelegationRewardsRequest) (*QueryKaijuDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KaijuDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) IBCKaijuDelegationRewards(ctx context.Context, req *QueryIBCKaijuDelegationRewardsRequest) (*QueryKaijuDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCKaijuDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) Kaiju(ctx context.Context, req *QueryKaijuRequest) (*QueryKaijuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kaiju not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Kaijus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Kaijus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/Kaijus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Kaijus(ctx, req.(*QueryKaijusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCKaiju_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCKaijuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCKaiju(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/IBCKaiju",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCKaiju(ctx, req.(*QueryIBCKaijuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllKaijusDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKaijusDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllKaijusDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/AllKaijusDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllKaijusDelegations(ctx, req.(*QueryAllKaijusDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KaijuValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijuValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KaijuValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/KaijuValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KaijuValidator(ctx, req.(*QueryKaijuValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllKaijuValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKaijuValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllKaijuValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/AllKaijuValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllKaijuValidators(ctx, req.(*QueryAllKaijuValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KaijusDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijusDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KaijusDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/KaijusDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KaijusDelegation(ctx, req.(*QueryKaijusDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KaijusDelegationByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijusDelegationByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KaijusDelegationByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/KaijusDelegationByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KaijusDelegationByValidator(ctx, req.(*QueryKaijusDelegationByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KaijuDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijuDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KaijuDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/KaijuDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KaijuDelegation(ctx, req.(*QueryKaijuDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCKaijuDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCKaijuDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCKaijuDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/IBCKaijuDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCKaijuDelegation(ctx, req.(*QueryIBCKaijuDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KaijuDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijuDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KaijuDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/KaijuDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KaijuDelegationRewards(ctx, req.(*QueryKaijuDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCKaijuDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCKaijuDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCKaijuDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/IBCKaijuDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCKaijuDelegationRewards(ctx, req.(*QueryIBCKaijuDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Kaiju_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKaijuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Kaiju(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.kaiju.Query/Kaiju",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Kaiju(ctx, req.(*QueryKaijuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju.kaiju.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Kaijus",
			Handler:    _Query_Kaijus_Handler,
		},
		{
			MethodName: "IBCKaiju",
			Handler:    _Query_IBCKaiju_Handler,
		},
		{
			MethodName: "AllKaijusDelegations",
			Handler:    _Query_AllKaijusDelegations_Handler,
		},
		{
			MethodName: "KaijuValidator",
			Handler:    _Query_KaijuValidator_Handler,
		},
		{
			MethodName: "AllKaijuValidators",
			Handler:    _Query_AllKaijuValidators_Handler,
		},
		{
			MethodName: "KaijusDelegation",
			Handler:    _Query_KaijusDelegation_Handler,
		},
		{
			MethodName: "KaijusDelegationByValidator",
			Handler:    _Query_KaijusDelegationByValidator_Handler,
		},
		{
			MethodName: "KaijuDelegation",
			Handler:    _Query_KaijuDelegation_Handler,
		},
		{
			MethodName: "IBCKaijuDelegation",
			Handler:    _Query_IBCKaijuDelegation_Handler,
		},
		{
			MethodName: "KaijuDelegationRewards",
			Handler:    _Query_KaijuDelegationRewards_Handler,
		},
		{
			MethodName: "IBCKaijuDelegationRewards",
			Handler:    _Query_IBCKaijuDelegationRewards_Handler,
		},
		{
			MethodName: "Kaiju",
			Handler:    _Query_Kaiju_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiju/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKaijusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kaijus) > 0 {
		for iNdEx := len(m.Kaijus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kaijus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kaiju != nil {
		{
			size, err := m.Kaiju.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCKaijuRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCKaijuRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCKaijuRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKaijuValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKaijuValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKaijuValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKaijusDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKaijusDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKaijusDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijusDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijusDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijusDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijusDelegationByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijusDelegationByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijusDelegationByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKaijusDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijusDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijusDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCKaijuDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCKaijuDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCKaijuDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKaijuDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCKaijuDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCKaijuDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCKaijuDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Rewards[iNdEx].Size()
				i -= size
				if _, err := m.Rewards[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalStaked) > 0 {
		for iNdEx := len(m.TotalStaked) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalStaked[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorShares) > 0 {
		for iNdEx := len(m.ValidatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalDelegationShares) > 0 {
		for iNdEx := len(m.TotalDelegationShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegationShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKaijuValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKaijuValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKaijuValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKaijusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kaijus) > 0 {
		for _, e := range m.Kaijus {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kaiju != nil {
		l = m.Kaiju.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCKaijuRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKaijuValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKaijusDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijusDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijusDelegationByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKaijusDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCKaijuDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKaijuDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCKaijuDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKaijuDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKaijuValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.TotalDelegationShares) > 0 {
		for _, e := range m.TotalDelegationShares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ValidatorShares) > 0 {
		for _, e := range m.ValidatorShares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalStaked) > 0 {
		for _, e := range m.TotalStaked {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKaijuValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kaijus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kaijus = append(m.Kaijus, KaijuAsset{})
			if err := m.Kaijus[len(m.Kaijus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kaiju", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kaiju == nil {
				m.Kaiju = &KaijuAsset{}
			}
			if err := m.Kaiju.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCKaijuRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCKaijuRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCKaijuRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKaijuValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKaijuValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKaijuValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKaijusDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKaijusDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKaijusDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijusDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijusDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijusDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijusDelegationByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijusDelegationByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijusDelegationByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijusDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijusDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijusDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCKaijuDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCKaijuDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCKaijuDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCKaijuDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCKaijuDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCKaijuDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegationShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegationShares = append(m.TotalDelegationShares, types.DecCoin{})
			if err := m.TotalDelegationShares[len(m.TotalDelegationShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorShares = append(m.ValidatorShares, types.DecCoin{})
			if err := m.ValidatorShares[len(m.ValidatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStaked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStaked = append(m.TotalStaked, types.DecCoin{})
			if err := m.TotalStaked[len(m.TotalStaked)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKaijuValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKaijuValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKaijuValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, QueryKaijuValidatorResponse{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
